REPLIT: YOU ARE IMPLEMENTING HEAD-ONLY AVATARS FOR “BASKETBALL LIFE SIMULATOR”

GOAL
Render clean 2D head avatars (transparent PNGs) by stacking image layers in the correct order. Use this on /customize (128px), /builder (128px), /home header and cards (64px/40px). No full body. Must randomize NPC faces reliably.

ACCEPTANCE
- Shows a crisp head in the preview box (NOT a circle).
- Layers draw in this exact order: base skin → eyes → brows → nose → mouth → facial hair (optional) → hair (optional) → accessory (optional).
- Works at sizes 128/64/40 and never overlaps other UI.
- Randomize button produces believable, varied faces.
- If any asset is missing, show a clear error in console and draw a neutral placeholder.

FOLDER STRUCTURE (upload your PNGs with transparent background)
public/
  avatars/
    heads/
      base/       skin_F1.png, skin_F2.png, skin_F3.png, skin_F4.png
      eyes/       eyes_01.png ... eyes_06.png
      brows/      brows_01.png ... brows_06.png
      nose/       nose_01.png ... nose_04.png
      mouth/      mouth_01.png ... mouth_06.png
      beard/      beard_00.png (empty), beard_01.png ... beard_06.png
      hair/       hair_00.png (bald), hair_01.png ... hair_12.png
      accessory/  none_00.png, headband_01.png, beanie_01.png, durag_01.png
    masks/
      headband_mask.png   (white shape to tint)
      beanie_mask.png
      durag_mask.png

ADD THIS HTML where you want the preview (e.g., /customize):
<div class="avatar-wrap">
  <canvas id="avatarCanvas" width="128" height="128" aria-label="avatar preview"></canvas>
  <div class="avatar-actions">
    <button id="btnRandom">Randomize</button>
  </div>
</div>

ADD THIS CSS (keeps size consistent; prevents overlap):
<style>
.avatar-wrap{display:inline-flex;flex-direction:column;gap:.5rem;align-items:center}
#avatarCanvas{width:128px;height:128px;image-rendering:auto;border-radius:12px;background:#2a2320}
.avatar-head-64 { width:64px;height:64px }
.avatar-head-40 { width:40px;height:40px }
</style>

ADD THIS SCRIPT (vanilla JS, no framework). It preloads, stacks, randomizes, and supports tinting for team color accents:
<script type="module">
const ASSETS = '/avatars/heads/';       // served from /public/avatars/heads
const MASKS  = '/avatars/masks/';       // served from /public/avatars/masks

const cfg = {
  base:      ['skin_F1.png','skin_F2.png','skin_F3.png','skin_F4.png'],
  eyes:      ['eyes_01.png','eyes_02.png','eyes_03.png','eyes_04.png','eyes_05.png','eyes_06.png'],
  brows:     ['brows_01.png','brows_02.png','brows_03.png','brows_04.png','brows_05.png','brows_06.png'],
  nose:      ['nose_01.png','nose_02.png','nose_03.png','nose_04.png'],
  mouth:     ['mouth_01.png','mouth_02.png','mouth_03.png','mouth_04.png','mouth_05.png','mouth_06.png'],
  beard:     ['beard_00.png','beard_01.png','beard_02.png','beard_03.png','beard_04.png','beard_05.png','beard_06.png'],
  hair:      ['hair_00.png','hair_01.png','hair_02.png','hair_03.png','hair_04.png','hair_05.png','hair_06.png','hair_07.png','hair_08.png','hair_09.png','hair_10.png','hair_11.png','hair_12.png'],
  accessory: ['none_00.png','headband_01.png','beanie_01.png','durag_01.png'],
  // mask mapping for tintable accessories; upload white masks matching item silhouette
  masks: {
    'headband_01.png':'headband_mask.png',
    'beanie_01.png':'beanie_mask.png',
    'durag_01.png':'durag_mask.png'
  }
};

// simple seeded RNG so NPCs stay the same each session
function sfc32(a,b,c,d){return function(){a|=0;b|=0;c|=0;d|=0;var t=(a+b|0)+d|0;d=d+1|0;a=b^b>>>9;b=c+(c<<3)|0;c=(c<<21|c>>>11)+t|0;return (t>>>0)/4294967296}}
function xmur3(str){for(var h=1779033703^str.length,i=0;i<str.length;i++)h=Math.imul(h^str.charCodeAt(i),3432918353),h=h<<13|h>>>19;return function(){h=Math.imul(h^h>>>16,2246822507);h=Math.imul(h^h>>>13,3266489909);return (h^h>>>16)>>>0}}
function rngFromSeed(seed){const n=xmur3(seed)();return sfc32(n, n^0x9E3779B1, n^0x85EBCA77, n^0xC2B2AE3D)}

async function load(src){
  return new Promise((res,rej)=>{
    const img=new Image(); img.crossOrigin='anonymous'; img.onload=()=>res(img); img.onerror=()=>rej(new Error('Missing '+src)); img.src=src;
  });
}
async function preload(list, folder){ return Object.fromEntries(await Promise.all(list.map(async f=>[f, await load(folder+f)]))) }

function pick(r, arr){ return arr[Math.floor(r()*arr.length)] }

// optional team tint for accessories
function tintLayer(ctx, maskImg, color){
  if(!maskImg) return;
  ctx.save();
  ctx.drawImage(maskImg,0,0,ctx.canvas.width,ctx.canvas.height);
  ctx.globalCompositeOperation='source-in';
  ctx.fillStyle=color;
  ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height);
  ctx.restore();
}

// draw stack in strict order
async function composeAvatar(canvas, parts, assets, masks, teamColor){
  const ctx = canvas.getContext('2d');
  const W = canvas.width, H = canvas.height;
  ctx.clearRect(0,0,W,H);
  // base bg (subtle) so transparency shows cleanly
  ctx.fillStyle = '#2a2320'; ctx.fillRect(0,0,W,H);

  const order = ['base','eyes','brows','nose','mouth','beard','hair','accessory'];
  for(const layer of order){
    const file = parts[layer];
    if(!file) continue;
    if(layer==='accessory' && ['headband_01.png','beanie_01.png','durag_01.png'].includes(file)){
      // first tint via mask, then draw the actual linework on top
      const maskName = cfg.masks[file];
      tintLayer(ctx, masks[maskName], teamColor || '#ff6a00'); // default accent if no team
      ctx.drawImage(assets[layer][file],0,0,W,H);
    } else {
      ctx.drawImage(assets[layer][file],0,0,W,H);
    }
  }
}

function randomParts(seed){
  const r = rngFromSeed(seed || String(Math.random()));
  // sensible probabilities
  const parts = {
    base:  pick(r,cfg.base),
    eyes:  pick(r,cfg.eyes),
    brows: pick(r,cfg.brows),
    nose:  pick(r,cfg.nose),
    mouth: pick(r,cfg.mouth),
    beard: r() < 0.45 ? pick(r,cfg.beard) : 'beard_00.png',
    hair:  pick(r,cfg.hair),  // includes hair_00 (bald)
    accessory: (()=>{
      const x=r();
      if(x<0.10) return 'headband_01.png';
      if(x<0.15) return 'beanie_01.png';
      if(x<0.20) return 'durag_01.png';
      return 'none_00.png';
    })()
  };
  return parts;
}

(async function main(){
  const canvas = document.getElementById('avatarCanvas');
  // scale logic for high-DPI without blur
  const scale = Math.min(2, window.devicePixelRatio || 1);
  canvas.width  = 128*scale; canvas.height = 128*scale;
  canvas.style.width='128px'; canvas.style.height='128px';
  const ctx = canvas.getContext('2d'); ctx.imageSmoothingEnabled = true;

  // PRELOAD
  try{
    const assets = {
      base:      await preload(cfg.base,      ASSETS+'base/'),
      eyes:      await preload(cfg.eyes,      ASSETS+'eyes/'),
      brows:     await preload(cfg.brows,     ASSETS+'brows/'),
      nose:      await preload(cfg.nose,      ASSETS+'nose/'),
      mouth:     await preload(cfg.mouth,     ASSETS+'mouth/'),
      beard:     await preload(cfg.beard,     ASSETS+'beard/'),
      hair:      await preload(cfg.hair,      ASSETS+'hair/'),
      accessory: await preload(cfg.accessory, ASSETS+'accessory/')
    };
    const masks = {
      'headband_mask.png': await load(MASKS+'headband_mask.png'),
      'beanie_mask.png':   await load(MASKS+'beanie_mask.png'),
      'durag_mask.png':    await load(MASKS+'durag_mask.png'),
    };

    // initial face
    const teamColor = '#EA6A11';               // change per team if you want
    const seed = 'player-preview';             // stable preview
    let parts = randomParts(seed);
    await composeAvatar(canvas, parts, assets, masks, teamColor);

    // hook randomize button (for quick check)
    document.getElementById('btnRandom')?.addEventListener('click', async ()=>{
      parts = randomParts(String(Math.random()));
      await composeAvatar(canvas, parts, assets, masks, teamColor);
    });

    // expose for other pages (home/roster)
    window.__avatar = { composeAvatar, randomParts, assets, masks };

  }catch(err){
    console.error('[Avatar]', err);
    const ctx = canvas.getContext('2d');
    ctx.fillStyle = '#2a2320'; ctx.fillRect(0,0,canvas.width,canvas.height);
    ctx.fillStyle = '#fff'; ctx.font = '16px sans-serif'; ctx.fillText('Missing avatar assets', 10, 24);
  }
})();
</script>

HOOKUPS ON OTHER PAGES
- On /home, create a <canvas class="avatar-head-64" id="homeAvatar"></canvas>, then:
<script>
  const c = document.getElementById('homeAvatar');
  c.width=64*window.devicePixelRatio; c.height=64*window.devicePixelRatio; c.style.width='64px'; c.style.height='64px';
  const seed = 'npc-42';
  const parts = window.__avatar.randomParts(seed);
  window.__avatar.composeAvatar(c, parts, window.__avatar.assets, window.__avatar.masks, '#EA6A11');
</script>

TROUBLESHOOTING (if you only see a pink circle / eyes):
- A layer file is missing or misnamed. Open DevTools → Console; you’ll see “Missing …png”.
- Your assets aren’t in /public. In Replit, put PNGs under `public/avatars/heads/...` and the masks under `public/avatars/masks/...`.
- PNGs must be transparent (RGBA). Re-export if you see white boxes.
- Canvas too blurry or too big? Confirm width/height are multiplied by devicePixelRatio while CSS size stays 128/64/40.
END